#include "stat_combo.h"
#include "ui_stat_qt.h"

stat_combo::stat_combo(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::stat_combo)
{
    ui->setupUi(this);
}

stat_combo::~stat_combo()
{
    delete ui;
}


//bar chart
void stat_combo::choix_bar()
{
QSqlQuery q1,q2,q3,q4;
qreal tot=0,c1=0,c2=0,c3=0;

q1.prepare("SELECT * FROM RDV");
q1.exec();

q2.prepare("SELECT * FROM RDV WHERE etat_rdv='urg'");
q2.exec();

q3.prepare("SELECT * FROM RDV WHERE etat_rdv='confirme'");
q3.exec();

q4.prepare("SELECT * FROM RDV WHERE etat_rdv='annuler' ");
q4.exec();

while (q1.next()){tot++;}
while (q2.next()){c1++;}
while (q3.next()){c2++;}
while (q4.next()){c3++;}

c1=c1/tot;
c2=c2/tot;
c3=c3/tot;


// nom bar
        QBarSet *set0 = new QBarSet("urgent");
        QBarSet *set1 = new QBarSet("confirmer");
        QBarSet *set2 = new QBarSet("annuler");

        // valeur bar
        *set0 << c1;
        *set1 << c2;
        *set2 << c3;



        // ajouter les informations
        // 1. Bar Chart
        QBarSeries *series = new QBarSeries();

        // 2. Stacked bar chart
        series->append(set0);
        series->append(set1);
        series->append(set2);


        //affichage
        QChart *chart = new QChart();

      
        chart->addSeries(series);


       

        // couleur pallette
        QPalette pal = qApp->palette();

       
        pal.setColor(QPalette::Window, QRgb(0xffffff));
        pal.setColor(QPalette::WindowText, QRgb(0x404044));

        
        qApp->setPalette(pal);


// affichage sur l'interface
chartView = new QChartView(chart,ui->label_stat);
chartView->setRenderHint(QPainter::Antialiasing);
chartView->setMinimumSize(400,400);

chartView->show();
}
